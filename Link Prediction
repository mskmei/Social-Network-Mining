{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.optim import Adam\n",
    "from sklearn.metrics import roc_auc_score, average_precision_score, roc_curve\n",
    "from sklearn.metrics import auc as cal_auc\n",
    "import scipy.sparse as sp\n",
    "import numpy as np\n",
    "import os\n",
    "import time\n",
    "\n",
    "# Train on CPU (hide GPU) due to memory constraints\n",
    "os.environ['CUDA_VISIBLE_DEVICES'] = \"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-323-e2740f2ec992>:21: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n",
      "  adj = nx.adjacency_matrix(G)[reorder]\n"
     ]
    }
   ],
   "source": [
    "# load the dataset\n",
    "import networkx as nx\n",
    "import pandas as pd\n",
    "\n",
    "def load_facebook_ego(dirname, ego):\n",
    "    \"\"\"\n",
    "    Load some ego network from facebook dataset from `dirname`.\n",
    "    \"\"\"\n",
    "    features = np.loadtxt(f\"{dirname}/{ego}.feat\")\n",
    "    nodes, features = features[:, 0], features[:, 1:]\n",
    "\n",
    "    facebook = pd.read_csv(\n",
    "        f\"{dirname}/{ego}.edges\",\n",
    "        sep=\" \",\n",
    "        names=[\"start_node\", \"end_node\"],\n",
    "    )\n",
    "    G = nx.from_pandas_edgelist(facebook, \"start_node\", \"end_node\")\n",
    "    G.add_nodes_from(nodes)\n",
    "\n",
    "    reorder = np.argsort(np.array(G.nodes))\n",
    "    adj = nx.adjacency_matrix(G)[reorder]\n",
    "    return G, adj, sp.csr_matrix(features)\n",
    "\n",
    "EGO_INDEX = 1684\n",
    "G, adj, features = load_facebook_ego(\n",
    "    r'..\\data\\facebook',\n",
    "    ego = EGO_INDEX\n",
    ")\n",
    "\n",
    "\n",
    "curves = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "# some preprocessing functions\n",
    "def sparse_to_tuple(sparse_mx):\n",
    "    if not sp.isspmatrix_coo(sparse_mx):\n",
    "        sparse_mx = sparse_mx.tocoo()\n",
    "    coords = np.vstack((sparse_mx.row, sparse_mx.col)).transpose()\n",
    "    values = sparse_mx.data\n",
    "    shape = sparse_mx.shape\n",
    "    return coords, values, shape\n",
    "\n",
    "def preprocess_graph(adj):\n",
    "    adj = sp.coo_matrix(adj)\n",
    "    adj_ = adj + sp.eye(adj.shape[0])\n",
    "    rowsum = np.array(adj_.sum(1))\n",
    "    degree_mat_inv_sqrt = sp.diags(np.power(rowsum, -0.5).flatten())\n",
    "    adj_normalized = adj_.dot(degree_mat_inv_sqrt).transpose().dot(degree_mat_inv_sqrt).tocoo()\n",
    "    return sparse_to_tuple(adj_normalized)\n",
    "\n",
    "def mask_test_edges(adj):\n",
    "    # Function to build test set with 10% positive links\n",
    "\n",
    "    # Remove diagonal elements\n",
    "    adj = adj - sp.dia_matrix((adj.diagonal()[np.newaxis, :], [0]), shape=adj.shape)\n",
    "    adj.eliminate_zeros()\n",
    "    # Check that diag is zero:\n",
    "    assert np.diag(adj.todense()).sum() == 0\n",
    "\n",
    "    adj_triu = sp.triu(adj)\n",
    "    adj_tuple = sparse_to_tuple(adj_triu)\n",
    "    edges = adj_tuple[0]\n",
    "    edges_all = sparse_to_tuple(adj)[0]\n",
    "    num_test = int(np.floor(edges.shape[0] / 10.))\n",
    "    num_val = int(np.floor(edges.shape[0] / 20.))\n",
    "\n",
    "    all_edge_idx = list(range(edges.shape[0]))\n",
    "    np.random.shuffle(all_edge_idx)\n",
    "    val_edge_idx = all_edge_idx[:num_val]\n",
    "    test_edge_idx = all_edge_idx[num_val:(num_val + num_test)]\n",
    "    test_edges = edges[test_edge_idx]\n",
    "    val_edges = edges[val_edge_idx]\n",
    "    train_edges = np.delete(edges, np.hstack([test_edge_idx, val_edge_idx]), axis=0)\n",
    "\n",
    "    def ismember(a, b, tol=5):\n",
    "        rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)\n",
    "        return np.any(rows_close)\n",
    "\n",
    "    test_edges_false = []\n",
    "    while len(test_edges_false) < len(test_edges):\n",
    "        idx_i = np.random.randint(0, adj.shape[0])\n",
    "        idx_j = np.random.randint(0, adj.shape[0])\n",
    "        if idx_i == idx_j or ismember([idx_i, idx_j], edges_all):\n",
    "            continue\n",
    "        if test_edges_false:\n",
    "            if ismember([idx_j, idx_i], np.array(test_edges_false)):\n",
    "                continue\n",
    "            if ismember([idx_i, idx_j], np.array(test_edges_false)):\n",
    "                continue\n",
    "        test_edges_false.append([idx_i, idx_j])\n",
    "\n",
    "    val_edges_false = []\n",
    "    while len(val_edges_false) < len(val_edges):\n",
    "        idx_i = np.random.randint(0, adj.shape[0])\n",
    "        idx_j = np.random.randint(0, adj.shape[0])\n",
    "        if idx_i == idx_j or ismember([idx_i, idx_j], edges_all) or ismember([idx_i, idx_j], train_edges)\\\n",
    "            or ismember([idx_j, idx_i], train_edges) or ismember([idx_i, idx_j], val_edges) or ismember([idx_j, idx_i], val_edges):\n",
    "            continue\n",
    "        if val_edges_false:\n",
    "            if ismember([idx_j, idx_i], np.array(val_edges_false)) or ismember([idx_i, idx_j], np.array(val_edges_false)):\n",
    "                continue\n",
    "        val_edges_false.append([idx_i, idx_j])\n",
    "\n",
    "    assert ~ismember(test_edges_false, edges_all)\n",
    "    assert ~ismember(val_edges_false, edges_all)\n",
    "    assert ~ismember(val_edges, train_edges)\n",
    "    assert ~ismember(test_edges, train_edges)\n",
    "    assert ~ismember(val_edges, test_edges)\n",
    "\n",
    "    data = np.ones(train_edges.shape[0])\n",
    "\n",
    "    # Re-build adj matrix\n",
    "    adj_train = sp.csr_matrix((data, (train_edges[:, 0], train_edges[:, 1])), shape=adj.shape)\n",
    "    adj_train = adj_train + adj_train.T\n",
    "\n",
    "    # NOTE: these edge lists only contain single direction of edge!\n",
    "    return adj_train, train_edges, val_edges, val_edges_false, test_edges, test_edges_false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Store original adjacency matrix (without diagonal entries) for later\n",
    "adj_orig, features_orig = adj, features\n",
    "adj_orig = adj_orig - sp.dia_matrix((adj_orig.diagonal()[np.newaxis, :], [0]), shape=adj_orig.shape)\n",
    "adj_orig.eliminate_zeros()\n",
    "\n",
    "adj_train, train_edges, val_edges, val_edges_false, test_edges, test_edges_false = mask_test_edges(adj)\n",
    "adj = adj_train\n",
    "\n",
    "# Some preprocessing\n",
    "adj_norm = preprocess_graph(adj)\n",
    "\n",
    "num_nodes = adj.shape[0]\n",
    "\n",
    "features = sparse_to_tuple(features_orig.tocoo())\n",
    "num_features = features[2][1]\n",
    "features_nonzero = features[1].shape[0]\n",
    "\n",
    "pos_weight = float(adj.shape[0] * adj.shape[0] - adj.sum()) / adj.sum()\n",
    "norm = adj.shape[0] * adj.shape[0] / float((adj.shape[0] * adj.shape[0] - adj.sum()) * 2)\n",
    "\n",
    "adj_label = adj_train + sp.eye(adj_train.shape[0])\n",
    "adj_label = sparse_to_tuple(adj_label)\n",
    "\n",
    "adj_norm = torch.sparse.FloatTensor(torch.LongTensor(adj_norm[0].T), \n",
    "                            torch.FloatTensor(adj_norm[1]), \n",
    "                            torch.Size(adj_norm[2]))\n",
    "adj_label = torch.sparse.FloatTensor(torch.LongTensor(adj_label[0].T), \n",
    "                            torch.FloatTensor(adj_label[1]), \n",
    "                            torch.Size(adj_label[2]))\n",
    "features = torch.sparse.FloatTensor(torch.LongTensor(features[0].T), \n",
    "                            torch.FloatTensor(features[1]), \n",
    "                            torch.Size(features[2]))\n",
    "\n",
    "weight_mask = adj_label.to_dense().view(-1) == 1\n",
    "weight_tensor = torch.ones(weight_mask.size(0)) \n",
    "weight_tensor[weight_mask] = pos_weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [],
   "source": [
    "class GraphConvSparse(nn.Module):\n",
    "\tdef __init__(self, input_dim, output_dim, adj, activation = F.relu, **kwargs):\n",
    "\t\tsuper(GraphConvSparse, self).__init__(**kwargs)\n",
    "\t\tself.weight = glorot_init(input_dim, output_dim) \n",
    "\t\tself.adj = adj\n",
    "\t\tself.activation = activation\n",
    "\n",
    "\tdef forward(self, inputs):\n",
    "\t\tx = inputs\n",
    "\t\tx = torch.mm(x,self.weight)\n",
    "\t\tx = torch.mm(self.adj, x)\n",
    "\t\toutputs = self.activation(x)\n",
    "\t\treturn outputs\n",
    "\n",
    "def dot_product_decode(Z):\n",
    "\t\"\"\"\n",
    "\tZ @ Z.T evaluates the (unnormalized) cosine similarity of each pair of nodes\n",
    "\t\\sigma(Z @ Z.T) predicts the probability\n",
    "\t\"\"\"\n",
    "\tA_pred = torch.sigmoid(torch.matmul(Z, Z.t()))\n",
    "\treturn A_pred\n",
    "\n",
    "def glorot_init(input_dim, output_dim):\n",
    "\t\"\"\"\n",
    "\tSome initialization of the network parameters.\n",
    "\t\"\"\"\n",
    "\tinit_range = np.sqrt(6.0 / (input_dim + output_dim))\n",
    "\tinitial = torch.rand(input_dim, output_dim) * 2 * init_range - init_range\n",
    "\treturn nn.Parameter(initial)\n",
    "\n",
    "\n",
    "class GAE(nn.Module):\n",
    "\tdef __init__(self, adj, input_dim, hidden1_dim, hidden2_dim):\n",
    "\t\t\"\"\"\n",
    "\t\tadj: adjaency matrix\n",
    "\t\tinput_dim: feature dimension\n",
    "\t\t\"\"\"\n",
    "\t\tsuper(GAE, self).__init__()\n",
    "\t\tself.base_gcn = GraphConvSparse(input_dim, hidden1_dim, adj)\n",
    "\t\tself.gcn_mean = GraphConvSparse(hidden1_dim, hidden2_dim, adj, activation=lambda x:x)\n",
    "\n",
    "\tdef encode(self, X):\n",
    "\t\t# embed feature X to latent z\n",
    "\t\thidden = self.base_gcn(X)\n",
    "\t\tz = self.mean = self.gcn_mean(hidden)\n",
    "\t\treturn z\n",
    "\n",
    "\tdef forward(self, X):\n",
    "\t\tZ = self.encode(X)\n",
    "\t\tA_pred = dot_product_decode(Z)\n",
    "\t\treturn A_pred\n",
    "\n",
    "\n",
    "class VGAE(nn.Module):\n",
    "\tdef __init__(self, adj, input_dim, hidden1_dim, hidden2_dim):\n",
    "\t\t\"\"\"\n",
    "\t\tadj: adjaency matrix\n",
    "\t\tinput_dim: feature dimension\n",
    "\t\t\"\"\"\n",
    "\t\tsuper(VGAE, self).__init__()\n",
    "\t\tself.hidden2_dim = hidden2_dim\n",
    "\t\tself.base_gcn = GraphConvSparse(input_dim, hidden1_dim, adj)\n",
    "\t\tself.gcn_mean = GraphConvSparse(hidden1_dim, hidden2_dim, adj, activation=lambda x:x)\n",
    "\t\tself.gcn_logstddev = GraphConvSparse(hidden1_dim, hidden2_dim, adj, activation=lambda x:x)\n",
    "\n",
    "\tdef encode(self, X):\n",
    "\t\t# embed the feature X to Gaussian distributions and sample latents\n",
    "\t\thidden = self.base_gcn(X)\n",
    "\t\tself.mean = self.gcn_mean(hidden)\n",
    "\t\tself.logstd = self.gcn_logstddev(hidden)\n",
    "\n",
    "\t\tgaussian_noise = torch.randn(X.size(0), self.hidden2_dim)\n",
    "\t\tsampled_z = gaussian_noise * torch.exp(self.logstd) + self.mean\n",
    "\t\treturn sampled_z\n",
    "\n",
    "\tdef forward(self, X):\n",
    "\t\tZ = self.encode(X)\n",
    "\t\tA_pred = dot_product_decode(Z)\n",
    "\t\treturn A_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_scores(edges_pos, edges_neg, adj_rec):\n",
    "    def sigmoid(x):\n",
    "        return 1 / (1 + np.exp(-x))\n",
    "\n",
    "    # Predict on test set of edges\n",
    "    preds = []\n",
    "    pos = []\n",
    "    for e in edges_pos:\n",
    "        preds.append((adj_rec[e[0], e[1]].item()))\n",
    "        pos.append(adj_orig[e[0], e[1]])\n",
    "\n",
    "    preds_neg = []\n",
    "    neg = []\n",
    "    for e in edges_neg:\n",
    "        preds_neg.append((adj_rec[e[0], e[1]].data))\n",
    "        neg.append(adj_orig[e[0], e[1]])\n",
    "\n",
    "    preds_all = sigmoid(np.hstack([preds, preds_neg]))\n",
    "    labels_all = np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])\n",
    "    roc_score = roc_auc_score(labels_all, preds_all)\n",
    "    ap_score = average_precision_score(labels_all, preds_all)\n",
    "    curve = roc_curve(labels_all, preds_all)#, drop_intermediate = False)\n",
    "    # print(labels_all.shape, curve[0].shape)\n",
    "\n",
    "    return roc_score, ap_score, curve\n",
    "\n",
    "def get_acc(adj_rec, adj_label):\n",
    "    labels_all = adj_label.to_dense().view(-1).long()\n",
    "    preds_all = (adj_rec > 0.5).view(-1).long()\n",
    "    accuracy = (preds_all == labels_all).sum().float() / labels_all.size(0)\n",
    "    return accuracy\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "metadata": {},
   "outputs": [],
   "source": [
    "# init model and optimizer\n",
    "input_dim = features.shape[1]\n",
    "model = GAE(adj_norm, input_dim, hidden1_dim = 32, hidden2_dim = 16)\n",
    "optimizer = Adam(model.parameters(), lr = 1e-2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0010 train_loss = 0.68665 train_acc = 0.03011 val_roc = 0.76617 val_ap = 0.76511 time = 0.33545\n",
      "Epoch: 0020 train_loss = 0.66731 train_acc = 0.08193 val_roc = 0.76622 val_ap = 0.76992 time = 0.34754\n",
      "Epoch: 0030 train_loss = 0.63122 train_acc = 0.34109 val_roc = 0.74538 val_ap = 0.75546 time = 0.24247\n",
      "Epoch: 0040 train_loss = 0.62570 train_acc = 0.45224 val_roc = 0.73758 val_ap = 0.73629 time = 0.21369\n",
      "Epoch: 0050 train_loss = 0.61650 train_acc = 0.44729 val_roc = 0.74578 val_ap = 0.74864 time = 0.25471\n",
      "Epoch: 0060 train_loss = 0.61258 train_acc = 0.46290 val_roc = 0.74558 val_ap = 0.75135 time = 0.22500\n",
      "Epoch: 0070 train_loss = 0.60892 train_acc = 0.46911 val_roc = 0.75141 val_ap = 0.76384 time = 0.21347\n",
      "Epoch: 0080 train_loss = 0.59907 train_acc = 0.45353 val_roc = 0.76982 val_ap = 0.78177 time = 0.21822\n",
      "Epoch: 0090 train_loss = 0.57296 train_acc = 0.50442 val_roc = 0.79439 val_ap = 0.80373 time = 0.23330\n",
      "Epoch: 0100 train_loss = 0.56802 train_acc = 0.52585 val_roc = 0.80395 val_ap = 0.80696 time = 0.20042\n",
      "Epoch: 0110 train_loss = 0.56491 train_acc = 0.52994 val_roc = 0.80465 val_ap = 0.81080 time = 0.20439\n",
      "Epoch: 0120 train_loss = 0.56230 train_acc = 0.53849 val_roc = 0.80699 val_ap = 0.81363 time = 0.21419\n",
      "Epoch: 0130 train_loss = 0.55928 train_acc = 0.53944 val_roc = 0.81045 val_ap = 0.81713 time = 0.20935\n",
      "Epoch: 0140 train_loss = 0.55385 train_acc = 0.54226 val_roc = 0.81574 val_ap = 0.82103 time = 0.22569\n",
      "Epoch: 0150 train_loss = 0.54799 train_acc = 0.55222 val_roc = 0.81195 val_ap = 0.81058 time = 0.22948\n",
      "Epoch: 0160 train_loss = 0.54545 train_acc = 0.54878 val_roc = 0.81798 val_ap = 0.82257 time = 0.19383\n",
      "Epoch: 0170 train_loss = 0.54332 train_acc = 0.55692 val_roc = 0.81697 val_ap = 0.82433 time = 0.25923\n",
      "Epoch: 0180 train_loss = 0.54178 train_acc = 0.55878 val_roc = 0.81763 val_ap = 0.82523 time = 0.22955\n",
      "Epoch: 0190 train_loss = 0.54018 train_acc = 0.55892 val_roc = 0.81914 val_ap = 0.82751 time = 0.20215\n",
      "Epoch: 0200 train_loss = 0.53869 train_acc = 0.55989 val_roc = 0.81937 val_ap = 0.82762 time = 0.18934\n",
      "Epoch: 0210 train_loss = 0.53716 train_acc = 0.55561 val_roc = 0.82264 val_ap = 0.82960 time = 0.20825\n",
      "Epoch: 0220 train_loss = 0.53541 train_acc = 0.55512 val_roc = 0.82306 val_ap = 0.83044 time = 0.26712\n",
      "Epoch: 0230 train_loss = 0.53308 train_acc = 0.55738 val_roc = 0.82193 val_ap = 0.82944 time = 0.22202\n",
      "Epoch: 0240 train_loss = 0.53073 train_acc = 0.55610 val_roc = 0.82286 val_ap = 0.83002 time = 0.25263\n",
      "Epoch: 0250 train_loss = 0.52853 train_acc = 0.56023 val_roc = 0.82160 val_ap = 0.82993 time = 0.26239\n",
      "Epoch: 0260 train_loss = 0.52686 train_acc = 0.55388 val_roc = 0.82790 val_ap = 0.83543 time = 0.22680\n",
      "Epoch: 0270 train_loss = 0.52461 train_acc = 0.56430 val_roc = 0.82265 val_ap = 0.82986 time = 0.20356\n",
      "Epoch: 0280 train_loss = 0.52287 train_acc = 0.55968 val_roc = 0.82936 val_ap = 0.83605 time = 0.29722\n",
      "Epoch: 0290 train_loss = 0.52091 train_acc = 0.56205 val_roc = 0.82977 val_ap = 0.83496 time = 0.26421\n",
      "Epoch: 0300 train_loss = 0.51926 train_acc = 0.56506 val_roc = 0.83034 val_ap = 0.83433 time = 0.24138\n",
      "Epoch: 0310 train_loss = 0.52378 train_acc = 0.56998 val_roc = 0.81788 val_ap = 0.81865 time = 0.26775\n",
      "Epoch: 0320 train_loss = 0.51618 train_acc = 0.56715 val_roc = 0.83539 val_ap = 0.83815 time = 0.21458\n",
      "Epoch: 0330 train_loss = 0.51474 train_acc = 0.56703 val_roc = 0.83735 val_ap = 0.84001 time = 0.21006\n",
      "Epoch: 0340 train_loss = 0.51307 train_acc = 0.57268 val_roc = 0.83488 val_ap = 0.83633 time = 0.24600\n",
      "Epoch: 0350 train_loss = 0.51155 train_acc = 0.57380 val_roc = 0.83678 val_ap = 0.83775 time = 0.23884\n",
      "Epoch: 0360 train_loss = 0.51059 train_acc = 0.57548 val_roc = 0.83651 val_ap = 0.83690 time = 0.25872\n",
      "Epoch: 0370 train_loss = 0.50944 train_acc = 0.57567 val_roc = 0.83785 val_ap = 0.83778 time = 0.23396\n",
      "Epoch: 0380 train_loss = 0.50805 train_acc = 0.57563 val_roc = 0.83999 val_ap = 0.84005 time = 0.23551\n",
      "Epoch: 0390 train_loss = 0.50708 train_acc = 0.57394 val_roc = 0.84231 val_ap = 0.84209 time = 0.22810\n",
      "Epoch: 0400 train_loss = 0.50616 train_acc = 0.57572 val_roc = 0.84154 val_ap = 0.84085 time = 0.24663\n",
      "End of training! test_roc = 0.83616 test_ap = 0.82654\n"
     ]
    }
   ],
   "source": [
    "# train model\n",
    "record = {'loss': [], 'train_acc': [], 'val_roc': [], 'val_ap': [], 'time': []}\n",
    "for epoch in range(1, 400 + 1):\n",
    "    t = time.time()\n",
    "\n",
    "    A_pred = model(features)\n",
    "    optimizer.zero_grad()\n",
    "    loss = log_lik = norm * F.binary_cross_entropy(A_pred.view(-1), adj_label.to_dense().view(-1), weight = weight_tensor)\n",
    "    \n",
    "    if isinstance(model, VGAE):\n",
    "        kl_divergence = 0.5/ A_pred.size(0) * (1 + 2*model.logstd - model.mean**2 - torch.exp(model.logstd)**2).sum(1).mean()\n",
    "        loss -= kl_divergence\n",
    "\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "\n",
    "    train_acc = get_acc(A_pred, adj_label)\n",
    "\n",
    "    val_roc, val_ap, curve = get_scores(val_edges, val_edges_false, A_pred)\n",
    "    if epoch % 10 == 0:\n",
    "        print(\"Epoch: %04d\"%epoch, \"train_loss = {:.5f}\".format(loss.item()),\n",
    "          \"train_acc = {:.5f}\".format(train_acc), \"val_roc = {:.5f}\".format(val_roc),\n",
    "          \"val_ap = {:.5f}\".format(val_ap),\n",
    "          \"time = {:.5f}\".format(time.time() - t))\n",
    "    record['loss'].append(loss.item())\n",
    "    record['train_acc'].append(train_acc)\n",
    "    record['val_roc'].append(val_roc)\n",
    "    record['val_ap'].append(val_ap)\n",
    "    record['time'].append(time.time())\n",
    "\n",
    "test_roc, test_ap, curve = get_scores(test_edges, test_edges_false, A_pred)\n",
    "curves['GAE'] = curve[:-1]\n",
    "print(\"End of training!\", \"test_roc =\", \"{:.5f}\".format(test_roc),\n",
    "      \"test_ap =\", \"{:.5f}\".format(test_ap))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x576 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "plt.figure(figsize = (15, 8))\n",
    "for i, key, value in zip(range(6), record.keys(), record.values()):\n",
    "    plt.subplot(2, 3, i + 1)\n",
    "    value = np.array(value)\n",
    "    if key == 'time': value = value - value[0]\n",
    "    plt.plot(value)\n",
    "    plt.title(key)\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## VGAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "metadata": {},
   "outputs": [],
   "source": [
    "# init model and optimizer\n",
    "input_dim = features.shape[1]\n",
    "model = VGAE(adj_norm, input_dim, hidden1_dim = 32, hidden2_dim = 16)\n",
    "optimizer = Adam(model.parameters(), lr = 1e-2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0010 train_loss = 0.90779 train_acc = 0.38955 val_roc = 0.53604 val_ap = 0.52636 time = 0.24657\n",
      "Epoch: 0020 train_loss = 0.72304 train_acc = 0.17924 val_roc = 0.57600 val_ap = 0.53560 time = 0.22670\n",
      "Epoch: 0030 train_loss = 0.72549 train_acc = 0.10902 val_roc = 0.67931 val_ap = 0.65588 time = 0.24293\n",
      "Epoch: 0040 train_loss = 0.71435 train_acc = 0.13022 val_roc = 0.72909 val_ap = 0.71259 time = 0.24281\n",
      "Epoch: 0050 train_loss = 0.69154 train_acc = 0.22773 val_roc = 0.69755 val_ap = 0.71445 time = 0.26658\n",
      "Epoch: 0060 train_loss = 0.66417 train_acc = 0.42028 val_roc = 0.72221 val_ap = 0.72014 time = 0.24874\n",
      "Epoch: 0070 train_loss = 0.65197 train_acc = 0.47081 val_roc = 0.71916 val_ap = 0.72060 time = 0.30773\n",
      "Epoch: 0080 train_loss = 0.64786 train_acc = 0.46668 val_roc = 0.71476 val_ap = 0.72770 time = 0.22691\n",
      "Epoch: 0090 train_loss = 0.64496 train_acc = 0.47494 val_roc = 0.71614 val_ap = 0.72649 time = 0.28475\n",
      "Epoch: 0100 train_loss = 0.64472 train_acc = 0.48128 val_roc = 0.72347 val_ap = 0.73354 time = 0.27045\n",
      "Epoch: 0110 train_loss = 0.64176 train_acc = 0.48772 val_roc = 0.72319 val_ap = 0.74113 time = 0.28477\n",
      "Epoch: 0120 train_loss = 0.64069 train_acc = 0.47924 val_roc = 0.72912 val_ap = 0.74606 time = 0.27948\n",
      "Epoch: 0130 train_loss = 0.64212 train_acc = 0.48369 val_roc = 0.73522 val_ap = 0.74575 time = 0.21417\n",
      "Epoch: 0140 train_loss = 0.63951 train_acc = 0.47979 val_roc = 0.73226 val_ap = 0.75313 time = 0.21672\n",
      "Epoch: 0150 train_loss = 0.63766 train_acc = 0.47325 val_roc = 0.72539 val_ap = 0.73722 time = 0.22444\n",
      "Epoch: 0160 train_loss = 0.63525 train_acc = 0.46865 val_roc = 0.73421 val_ap = 0.75071 time = 0.24897\n",
      "Epoch: 0170 train_loss = 0.62917 train_acc = 0.47255 val_roc = 0.74386 val_ap = 0.75473 time = 0.24624\n",
      "Epoch: 0180 train_loss = 0.61875 train_acc = 0.47602 val_roc = 0.75181 val_ap = 0.76501 time = 0.27224\n",
      "Epoch: 0190 train_loss = 0.61003 train_acc = 0.48788 val_roc = 0.77911 val_ap = 0.79155 time = 0.24585\n",
      "Epoch: 0200 train_loss = 0.60283 train_acc = 0.52089 val_roc = 0.78637 val_ap = 0.79158 time = 0.21606\n",
      "Epoch: 0210 train_loss = 0.60301 train_acc = 0.51936 val_roc = 0.78448 val_ap = 0.79190 time = 0.21132\n",
      "Epoch: 0220 train_loss = 0.60059 train_acc = 0.51752 val_roc = 0.78416 val_ap = 0.79638 time = 0.21995\n",
      "Epoch: 0230 train_loss = 0.59930 train_acc = 0.52510 val_roc = 0.78273 val_ap = 0.79786 time = 0.22634\n",
      "Epoch: 0240 train_loss = 0.59840 train_acc = 0.52436 val_roc = 0.78578 val_ap = 0.79093 time = 0.26972\n",
      "Epoch: 0250 train_loss = 0.59673 train_acc = 0.53009 val_roc = 0.79453 val_ap = 0.80236 time = 0.25416\n",
      "Epoch: 0260 train_loss = 0.59780 train_acc = 0.52164 val_roc = 0.79962 val_ap = 0.80523 time = 0.23976\n",
      "Epoch: 0270 train_loss = 0.59777 train_acc = 0.52762 val_roc = 0.78925 val_ap = 0.79605 time = 0.22654\n",
      "Epoch: 0280 train_loss = 0.59723 train_acc = 0.52053 val_roc = 0.79915 val_ap = 0.80302 time = 0.45492\n",
      "Epoch: 0290 train_loss = 0.59769 train_acc = 0.52775 val_roc = 0.77776 val_ap = 0.78842 time = 0.30513\n",
      "Epoch: 0300 train_loss = 0.59515 train_acc = 0.52252 val_roc = 0.80206 val_ap = 0.81020 time = 0.36343\n",
      "Epoch: 0310 train_loss = 0.59488 train_acc = 0.52694 val_roc = 0.79592 val_ap = 0.80367 time = 0.32697\n",
      "Epoch: 0320 train_loss = 0.59446 train_acc = 0.52786 val_roc = 0.80938 val_ap = 0.81151 time = 0.27121\n",
      "Epoch: 0330 train_loss = 0.59143 train_acc = 0.52455 val_roc = 0.79982 val_ap = 0.80703 time = 0.37786\n",
      "Epoch: 0340 train_loss = 0.58972 train_acc = 0.52295 val_roc = 0.80362 val_ap = 0.80571 time = 0.22288\n",
      "Epoch: 0350 train_loss = 0.58487 train_acc = 0.53081 val_roc = 0.79672 val_ap = 0.80058 time = 0.21618\n",
      "Epoch: 0360 train_loss = 0.58376 train_acc = 0.53571 val_roc = 0.80186 val_ap = 0.80796 time = 0.20479\n",
      "Epoch: 0370 train_loss = 0.58165 train_acc = 0.53346 val_roc = 0.80932 val_ap = 0.81702 time = 0.23708\n",
      "Epoch: 0380 train_loss = 0.58071 train_acc = 0.53522 val_roc = 0.80033 val_ap = 0.80890 time = 0.22147\n",
      "Epoch: 0390 train_loss = 0.57852 train_acc = 0.53496 val_roc = 0.80643 val_ap = 0.81209 time = 0.41339\n",
      "Epoch: 0400 train_loss = 0.57944 train_acc = 0.54109 val_roc = 0.80600 val_ap = 0.80863 time = 0.35693\n",
      "End of training! test_roc = 0.80184 test_ap = 0.80433\n"
     ]
    }
   ],
   "source": [
    "# train model\n",
    "record = {'loss': [], 'train_acc': [], 'val_roc': [], 'val_ap': [], 'time': []}\n",
    "for epoch in range(1, 400 + 1):\n",
    "    t = time.time()\n",
    "\n",
    "    A_pred = model(features)\n",
    "    optimizer.zero_grad()\n",
    "    loss = log_lik = norm * F.binary_cross_entropy(A_pred.view(-1), adj_label.to_dense().view(-1), weight = weight_tensor)\n",
    "    \n",
    "    if isinstance(model, VGAE):\n",
    "        kl_divergence = 0.5/ A_pred.size(0) * (1 + 2*model.logstd - model.mean**2 - torch.exp(model.logstd)**2).sum(1).mean()\n",
    "        loss -= kl_divergence\n",
    "\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "\n",
    "    train_acc = get_acc(A_pred, adj_label)\n",
    "\n",
    "    val_roc, val_ap, curve = get_scores(val_edges, val_edges_false, A_pred)\n",
    "    if epoch % 10 == 0:\n",
    "        print(\"Epoch: %04d\"%epoch, \"train_loss = {:.5f}\".format(loss.item()),\n",
    "          \"train_acc = {:.5f}\".format(train_acc), \"val_roc = {:.5f}\".format(val_roc),\n",
    "          \"val_ap = {:.5f}\".format(val_ap),\n",
    "          \"time = {:.5f}\".format(time.time() - t))\n",
    "    record['loss'].append(loss.item())\n",
    "    record['train_acc'].append(train_acc)\n",
    "    record['val_roc'].append(val_roc)\n",
    "    record['val_ap'].append(val_ap)\n",
    "    record['time'].append(time.time())\n",
    "\n",
    "test_roc, test_ap, curve = get_scores(test_edges, test_edges_false, A_pred)\n",
    "curves['VGAE'] = curve[:-1]\n",
    "print(\"End of training!\", \"test_roc =\", \"{:.5f}\".format(test_roc),\n",
    "      \"test_ap =\", \"{:.5f}\".format(test_ap))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1080x576 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "plt.figure(figsize = (15, 8))\n",
    "for i, key, value in zip(range(6), record.keys(), record.values()):\n",
    "    plt.subplot(2, 3, i + 1)\n",
    "    value = np.array(value)\n",
    "    if key == 'time': value = value - value[0]\n",
    "    plt.plot(value)\n",
    "    plt.title(key)\n",
    "plt.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Node Similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "metadata": {},
   "outputs": [],
   "source": [
    "G_train = nx.from_scipy_sparse_array(adj_train)\n",
    "jaccard = list(nx.jaccard_coefficient(G_train))      \n",
    "adamic  = list(nx.adamic_adar_index(G_train))        \n",
    "# pref    = list(nx.preferential_attachment(G_train))\n",
    "pref = np.array(adj_train.sum(axis = 1)) @ np.array(adj_train.sum(axis = 1)).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(metric):\n",
    "    if not isinstance(metric, np.ndarray) and not isinstance(metric, torch.Tensor):\n",
    "        metric = np.array(metric)\n",
    "        pred = sp.csr_matrix((metric[:,2], \n",
    "            (metric[:,0].astype('int'), metric[:,1].astype('int'))), shape = adj_train.shape)\n",
    "        pred = pred.todense()\n",
    "    else:\n",
    "        pred = metric\n",
    "    pred = torch.Tensor(pred)\n",
    "    pred = (pred + pred.T)\n",
    "    pred /= pred.max()\n",
    "    return get_scores(test_edges, test_edges_false, pred)\n",
    "\n",
    "for key, metric in zip(('jaccard', 'adamic', 'pref'), (jaccard, adamic, pref)):\n",
    "    curves[key] = (evaluate(metric)[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 648x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (9, 5))\n",
    "aucs = {}\n",
    "for key, value in curves.items():\n",
    "    plt.plot(value[0], value[1])\n",
    "    aucs[key] = cal_auc(value[0], value[1])\n",
    "plt.legend([k + ' '*(8-2*len(k)) + ' %.6f'%aucs[k] for k in curves.keys()])\n",
    "plt.title('ROC on Ego Network %d'%EGO_INDEX)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.4"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "1120dc956da57eca5c948a0118f4cdcd4d1b3be98c72752ed298d16085a61d24"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
